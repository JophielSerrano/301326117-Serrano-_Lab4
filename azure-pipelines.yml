trigger:
- master

pool:
  name: 'Default'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  feedName: 'Lab4Feed'

steps:
# Authenticate NuGet Feed
- task: NuGetAuthenticate@1
  displayName: 'Authenticate NuGet Feed'
  inputs:
    nuGetServiceConnections: 'Lab4Feed'

# Ensure .NET SDK is installed
- task: UseDotNetCore@2
  displayName: 'Use .NET SDK'
  inputs:
    version: '8.x'  # Specify .NET 8 SDK
    includePreviewVersions: false

# NuGet Tool Installation
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet Tools'
  inputs:
    versionSpec: '5.x'  # Specify NuGet version

# Restore Dependencies
- task: DotNetCoreCLI@2
  displayName: 'Restore Dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
    feedsToUse: 'select'
    vstsFeed: '$(feedName)'

# Build Project
- task: DotNetCoreCLI@2
  displayName: 'Build Project'
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration) --no-restore'

# Optional: Run Tests
- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests'
  inputs:
    command: 'test'
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

# Pack NuGet Package
- task: DotNetCoreCLI@2
  displayName: 'Pack NuGet Package'
  inputs:
    command: 'pack'
    packagesToPack: '**/StringExtensionsLibrary.csproj'
    versioningScheme: 'byPrereleaseNumber'
    majorVersion: '1'
    minorVersion: '0'
    patchVersion: '0'
    outputDir: '$(Build.ArtifactStagingDirectory)'

# Push NuGet Package
- task: NuGetCommand@2
  displayName: 'Push NuGet Package'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '$(feedName)'
    allowPackageConflicts: true

# Diagnostic: List Artifacts
- task: PowerShell@2
  displayName: 'Debug: List Artifacts'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Listing artifacts in staging directory:"
      Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Recurse